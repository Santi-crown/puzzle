#BlueJ class context
comment0.target=Puzzle
comment1.params=rows\ cols
comment1.target=Puzzle(int,\ int)
comment10.params=row\ col
comment10.target=void\ tiltDown(int,\ int)
comment10.text=\r\n\ \ \ \ //\ Tilt\ down\ starting\ from\ the\ top\ row\ recursively\r\n\ \ \ \ private\ void\ tiltDown(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (row\ >\=\ rows\ -\ 1)\ return;\ //\ Caso\ base\:\ hemos\ llegado\ al\ fondo\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ //from\r\n\ \ \ \ \ \ \ \ int[]\ currentPos\ \=\ {row,\ col};\r\n\ \ \ \ \ \ \ \ //to\r\n\ \ \ \ \ \ \ \ int[]\ nextPos\ \=\ {row\ +\ 1,\ col};\r\n\ \ \ \ \ \ \ \ //\ from\r\n\ \ \ \ \ \ \ \ Tile\ fromTile\ \=\ tiles.get(currentPos[0]).get(currentPos[1]);\r\n\ \ \ \ \ \ \ \ //\ to\r\n\ \ \ \ \ \ \ \ Tile\ toTile\ \=\ tiles.get(nextPos[0]).get(nextPos[1]);\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isTileEmpty(tiles.get(nextPos[0]).get(nextPos[1])))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ relocateTileMovement(fromTile,\ toTile,currentPos,\ nextPos);\ //\ Mueve\ la\ tile\ hacia\ abajo\r\n\ \ \ \ \ \ \ \ \ \ \ \ tiltDown(row\ +\ 1,\ col);\ //\ Llama\ recursivamente\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ Tilt\ up\ starting\ from\ the\ bottom\ row\ recursively\r\n\ \ \ \ private\ void\ tiltUp(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (row\ <\=\ 0)\ return;\ //\ Caso\ base\:\ hemos\ llegado\ al\ tope\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ int[]\ currentPos\ \=\ {row,\ col};\r\n\ \ \ \ \ \ \ \ int[]\ nextPos\ \=\ {row\ -\ 1,\ col};\r\n\ \ \ \ \ \ \ \ //\ from\r\n\ \ \ \ \ \ \ \ Tile\ fromTile\ \=\ tiles.get(currentPos[0]).get(currentPos[1]);\r\n\ \ \ \ \ \ \ \ //\ to\r\n\ \ \ \ \ \ \ \ Tile\ toTile\ \=\ tiles.get(nextPos[0]).get(nextPos[1]);\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isTileEmpty(tiles.get(nextPos[0]).get(nextPos[1])))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ relocateTileMovement(fromTile,\ toTile,currentPos,\ nextPos);\ //\ Mueve\ la\ tile\ hacia\ arriba\r\n\ \ \ \ \ \ \ \ \ \ \ \ tiltUp(row\ -\ 1,\ col);\ //\ Llama\ recursivamente\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ Tilt\ right\ starting\ from\ the\ left\ column\ recursively\r\n\ \ \ \ private\ void\ tiltRight(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (col\ >\=\ cols\ -\ 1)\ return;\ //\ Caso\ base\:\ hemos\ llegado\ al\ extremo\ derecho\r\n\ \ \ \ \ \ \ \ int[]\ currentPos\ \=\ {row,\ col};\r\n\ \ \ \ \ \ \ \ int[]\ nextPos\ \=\ {row,\ col\ +\ 1};\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ //\ from\r\n\ \ \ \ \ \ \ \ Tile\ fromTile\ \=\ tiles.get(currentPos[0]).get(currentPos[1]);\r\n\ \ \ \ \ \ \ \ //\ to\r\n\ \ \ \ \ \ \ \ Tile\ toTile\ \=\ tiles.get(nextPos[0]).get(nextPos[1]);\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isTileEmpty(tiles.get(nextPos[0]).get(nextPos[1])))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ relocateTileMovement(fromTile,\ toTile,currentPos,\ nextPos);\ //\ Mueve\ la\ tile\ hacia\ la\ derecha\r\n\ \ \ \ \ \ \ \ \ \ \ \ tiltRight(row,\ col\ +\ 1);\ //\ Llama\ recursivamente\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ Tilt\ left\ starting\ from\ the\ right\ column\ recursively\r\n\ \ \ \ private\ void\ tiltLeft(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (col\ <\=\ 0)\ return;\ //\ Caso\ base\:\ hemos\ llegado\ al\ extremo\ izquierdo\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ int[]\ currentPos\ \=\ {row,\ col};\r\n\ \ \ \ \ \ \ \ int[]\ nextPos\ \=\ {row,\ col\ -\ 1};\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ //\ from\r\n\ \ \ \ \ \ \ \ Tile\ fromTile\ \=\ tiles.get(currentPos[0]).get(currentPos[1]);\r\n\ \ \ \ \ \ \ \ //\ to\r\n\ \ \ \ \ \ \ \ Tile\ toTile\ \=\ tiles.get(nextPos[0]).get(nextPos[1]);\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isTileEmpty(tiles.get(nextPos[0]).get(nextPos[1])))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ relocateTileMovement(fromTile,\ toTile,currentPos,\ nextPos);\ //\ Mueve\ la\ tile\ hacia\ la\ izquierda\r\n\ \ \ \ \ \ \ \ \ \ \ \ tiltLeft(row,\ col\ -\ 1);\ //\ Llama\ recursivamente\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n
comment11.params=row\ col
comment11.target=void\ tiltUp(int,\ int)
comment12.params=row\ col
comment12.target=void\ tiltRight(int,\ int)
comment13.params=row\ col
comment13.target=void\ tiltLeft(int,\ int)
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment3.params=row\ column\ label
comment3.target=void\ addTile(int,\ int,\ char)
comment4.params=row\ column
comment4.target=void\ deleteTile(int,\ int)
comment5.params=fromTile\ toTile\ from\ to
comment5.target=void\ relocateTileMovement(Tile,\ Tile,\ int[],\ int[])
comment6.params=from\ to
comment6.target=void\ relocateTile(int[],\ int[])
comment7.params=coords
comment7.target=boolean\ areValidCoordinates(int[])
comment8.params=tile
comment8.target=boolean\ isTileEmpty(Tile)
comment9.params=direction
comment9.target=void\ tilt(char)
numComments=15
