#BlueJ class context
comment0.target=Puzzle
comment0.text=\r\n\ This\ class\ represents\ a\ puzzle\ simulator\ with\ tiles,\ including\ initial\ and\ final\ boards,\r\n\ movable\ tiles,\ holes,\ and\ glue.\ It\ allows\ operations\ such\ as\ adding,\ removing,\ moving\ tiles,\r\n\ and\ applying\ or\ removing\ glue.\r\n\r\n\ @author\ Andersson\ David\ S\u00E1nchez\ M\u00E9ndez\r\n\ @author\ Cristian\ Santiago\ Pedraza\ Rodr\u00EDguez\ \ \ \r\n\r\n\ @version\ 2024\r\n
comment1.params=h\ w
comment1.target=Puzzle(int,\ int)
comment1.text=\r\n\ Constructor\ to\ initialize\ the\ boards\ without\ initial\ and\ final\ matrices.\r\n\ \r\n\ @param\ h\ Height\ of\ the\ board.\r\n\ @param\ w\ Width\ of\ the\ board.\r\n\ @throws\ PuzzleExceptions.ExceedPuzzleSpaceException\ if\ the\ specified\ height\ or\ width\ exceeds\ 500.\r\n\ @throws\ PuzzleExceptions.ConstructorsExceptions\ if\ the\ specified\ height\ or\ width\ is\ less\ than\ 1.\r\n
comment10.params=row\ column\ tileData
comment10.target=void\ addTile(int,\ int,\ java.lang.String)
comment10.text=\r\n\ Adds\ a\ tile\ to\ the\ board\ at\ the\ specified\ position\ using\ tile\ data\ in\ string\ format.\r\n\ This\ method\ is\ overloaded\ to\ allow\ the\ creation\ of\ different\ types\ of\ tiles.\r\n\r\n\ @param\ row\ Row\ index\ of\ the\ tile.\r\n\ @param\ column\ Column\ index\ of\ the\ tile.\r\n\ @param\ tileData\ A\ string\ containing\ the\ type\ and\ label\ of\ the\ tile,\ formatted\ as\ "[type\ label]".\r\n\ @throws\ PuzzleExceptions.addDeleteTileExceptions\ if\ the\ tile\ data\ is\ invalid\ or\ if\ the\ position\ is\ invalid.\r\n\ @throws\ PuzzleExceptions.ExceedPuzzleSpaceException\ if\ the\ specified\ position\ exceeds\ the\ puzzle\ dimensions.\r\n
comment11.params=row\ column
comment11.target=void\ deleteTile(int,\ int)
comment11.text=\r\n\ Removes\ a\ tile\ from\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ Row\ index\ of\ the\ tile.\r\n\ @param\ column\ Column\ index\ of\ the\ tile.\r\n\ @throws\ PuzzleExceptions.addDeleteTileExceptions\ if\ the\ tile\ cannot\ be\ deleted\ due\ to\ specific\ conditions.\r\n\ @throws\ PuzzleExceptions.ExceedPuzzleSpaceException\ if\ the\ specified\ position\ exceeds\ the\ puzzle\ dimensions.\r\n
comment12.params=from\ to
comment12.target=void\ relocateTile(int[],\ int[])
comment12.text=\r\n\ Relocates\ a\ tile\ from\ the\ given\ source\ position\ to\ the\ destination\ position.\r\n\ \r\n\ @param\ from\ the\ coordinates\ of\ the\ source\ position\ as\ an\ integer\ array\ [row,\ col].\r\n\ @param\ to\ \ \ the\ coordinates\ of\ the\ destination\ position\ as\ an\ integer\ array\ [row,\ col].\r\n\ @throws\ PuzzleExceptions.relocateTileExceptions\ if\ the\ relocation\ cannot\ be\ performed\ due\ to\ specific\ conditions.\r\n
comment13.params=fromTile\ toTile\ from\ to
comment13.target=void\ relocateTileMovement(BaseTile,\ BaseTile,\ int[],\ int[])
comment13.text=\r\n\ Performs\ the\ visual\ and\ logical\ movement\ of\ a\ tile\ from\ one\ position\ to\ another.\r\n\ \r\n\ @param\ fromTile\ the\ tile\ to\ be\ moved\ from\ the\ source\ position.\r\n\ @param\ toTile\ \ \ the\ tile\ at\ the\ destination\ position\ (empty).\r\n\ @param\ from\ \ \ \ \ the\ source\ coordinates\ as\ an\ integer\ array\ [row,\ col].\r\n\ @param\ to\ \ \ \ \ \ \ the\ destination\ coordinates\ as\ an\ integer\ array\ [row,\ col].\r\n
comment14.params=coords
comment14.target=boolean\ areValidCoordinates(int[])
comment14.text=\r\n\ Validates\ whether\ the\ given\ coordinates\ are\ within\ the\ bounds\ of\ the\ board.\r\n\ \r\n\ @param\ coords\ the\ coordinates\ to\ validate\ as\ an\ integer\ array\ [row,\ col].\r\n\ @return\ {@code\ true}\ if\ the\ coordinates\ are\ valid;\ {@code\ false}\ otherwise.\r\n
comment15.params=row\ column
comment15.target=void\ addGlue(int,\ int)
comment15.text=\r\n\ Applies\ glue\ to\ a\ tile\ at\ the\ specified\ position.\r\n\r\n\ @param\ row\ the\ row\ of\ the\ tile.\r\n\ @param\ column\ the\ column\ of\ the\ tile.\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ if\ the\ glue\ cannot\ be\ applied\ due\ to\ specific\ conditions.\r\n
comment16.params=row\ column\ glueType
comment16.target=void\ addGlue(int,\ int,\ java.lang.String)
comment16.text=\r\n\ Applies\ glue\ to\ a\ tile\ at\ the\ specified\ position.\r\n\r\n\ @param\ row\ \ \ \ \ \ the\ row\ of\ the\ tile.\r\n\ @param\ column\ \ \ the\ column\ of\ the\ tile.\r\n\ @param\ glueType\ the\ type\ of\ glue\ ("normal"\ or\ "super").\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ if\ the\ glue\ cannot\ be\ applied\ due\ to\ specific\ conditions.\r\n
comment17.params=tile
comment17.target=boolean\ hasSuperGlue(BaseTile)
comment17.text=\r\n\ Auxiliary\ method\ to\ verify\ if\ the\ tile\ has\ superGlue.\r\n\r\n\ @param\ tile\ Tile\ to\ verify.\r\n\ @return\ true\ if\ the\ tile\ has\ superGlue,\ false\ otherwise.\r\n
comment18.params=row\ column
comment18.target=void\ deleteGlue(int,\ int)
comment18.text=\r\n\ Removes\ glue\ from\ a\ tile\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ the\ row\ of\ the\ tile.\r\n\ @param\ column\ the\ column\ of\ the\ tile.\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ if\ the\ glue\ cannot\ be\ removed\ due\ to\ specific\ conditions.\r\n
comment19.params=tile
comment19.target=void\ updateAdjacentTiles(BaseTile)
comment19.text=\r\n\ Updates\ the\ adjacent\ tiles\ after\ applying\ glue\ to\ a\ tile.\r\n\ \r\n\ @param\ tile\ the\ tile\ to\ which\ glue\ has\ been\ applied.\r\n
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment2.text=\r\n\ Constructor\ to\ initialize\ the\ boards\ with\ initial\ and\ final\ character\ matrices.\r\n\ \r\n\ @param\ starting\ Initial\ state\ of\ the\ board.\r\n\ @param\ ending\ Final\ state\ of\ the\ board.\r\n
comment20.params=tile
comment20.target=void\ updateAdjacentTilesAfterGlueRemoval(BaseTile)
comment20.text=\r\n\ Updates\ the\ adjacent\ tiles\ after\ removing\ glue\ from\ a\ tile.\r\n\ \r\n\ @param\ tile\ the\ tile\ from\ which\ glue\ has\ been\ removed.\r\n
comment21.params=tile
comment21.target=boolean\ isAdjacentToGlue(BaseTile)
comment21.text=\r\n\ Checks\ if\ a\ tile\ is\ adjacent\ to\ any\ tile\ with\ glue\ applied.\r\n\ \r\n\ @param\ tile\ the\ tile\ to\ check.\r\n\ @return\ {@code\ true}\ if\ adjacent\ to\ a\ tile\ with\ glue;\ {@code\ false}\ otherwise.\r\n
comment22.params=color\ palenessFactor
comment22.target=java.awt.Color\ getPaleColor(java.awt.Color,\ int)
comment22.text=\r\n\ Generates\ a\ paler\ version\ of\ the\ given\ color\ based\ on\ the\ paleness\ factor.\r\n\ \r\n\ @param\ color\ the\ original\ color.\r\n\ @param\ palenessFactor\ the\ amount\ to\ increase\ each\ RGB\ component.\r\n\ @return\ a\ new\ {@code\ Color}\ object\ with\ adjusted\ RGB\ values.\r\n
comment23.params=direction
comment23.target=void\ tilt(char)
comment23.text=\r\n\ Tilts\ the\ board\ in\ the\ specified\ direction.\r\n\ \r\n\ @param\ direction\ the\ direction\ to\ tilt\ ('d'\ for\ down,\ 'u'\ for\ up,\ 'r'\ for\ right,\ 'l'\ for\ left).\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ \ Validate\ fragile\ glue\ when\ tilt\r\n
comment24.params=direction
comment24.target=boolean\ tiltOnce(char)
comment24.text=\r\n\ Performs\ a\ single\ tilt\ in\ the\ specified\ direction.\r\n\ \r\n\ @param\ direction\ the\ direction\ to\ tilt\ ('d'\ for\ down,\ 'u'\ for\ up,\ 'r'\ for\ right,\ 'l'\ for\ left).\r\n\ @return\ {@code\ true}\ if\ there\ were\ changes;\ {@code\ false}\ otherwise.\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ tilt\ controlled\ once\r\n
comment25.params=col
comment25.target=void\ tiltUpWithGlue(int)
comment25.text=\r\n\ Tilts\ the\ specified\ column\ upwards,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ col\ the\ column\ to\ tilt\ upwards.\r\n
comment26.params=col
comment26.target=void\ tiltDownWithGlue(int)
comment26.text=\r\n\ Tilts\ the\ specified\ column\ downwards,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ col\ the\ column\ to\ tilt\ downwards.\r\n
comment27.params=row
comment27.target=void\ tiltLeftWithGlue(int)
comment27.text=\r\n\ Tilts\ the\ specified\ row\ to\ the\ left,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ row\ the\ row\ to\ tilt\ to\ the\ left.\r\n
comment28.params=row
comment28.target=void\ tiltRightWithGlue(int)
comment28.text=\r\n\ Tilts\ the\ specified\ row\ to\ the\ right,\ considering\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ row\ the\ row\ index\ to\ tilt\ to\ the\ right.\r\n
comment29.params=tile
comment29.target=int\ calculateMaxMoveUpFlyingTile(BaseTile)
comment3.params=ending
comment3.target=Puzzle(char[][])
comment3.text=\r\n\ Constructor\ to\ initialize\ an\ empty\ initial\ board\ and\ a\ final\ board\ with\ tiles.\r\n\ \r\n\ @param\ ending\ Final\ state\ of\ the\ board.\r\n
comment30.params=tile\ steps
comment30.target=void\ moveTileUp(BaseTile,\ int)
comment31.params=tile
comment31.target=int\ calculateMaxMoveDownFlyingTile(BaseTile)
comment32.params=tile\ steps
comment32.target=void\ moveTileDown(BaseTile,\ int)
comment33.params=tile
comment33.target=int\ calculateMaxMoveLeftFlyingTile(BaseTile)
comment34.params=tile\ steps
comment34.target=void\ moveTileLeft(BaseTile,\ int)
comment35.params=tile
comment35.target=int\ calculateMaxMoveRightFlyingTile(BaseTile)
comment36.params=tile\ steps
comment36.target=void\ moveTileRight(BaseTile,\ int)
comment37.params=row\ column\ group\ isGluedOrStuck
comment37.target=int\ calculateMaxMoveUp(int,\ int,\ java.util.List,\ boolean)
comment37.text=\r\n\ Calculates\ the\ maximum\ possible\ upward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ up,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment38.params=group\ isGluedOrStuck
comment38.target=int\ calculateMaxMoveUpGroup(java.util.List,\ boolean)
comment38.text=\r\n\ Calculates\ the\ maximum\ possible\ upward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ up,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment39.params=row\ column\ group\ isGluedOrStuck
comment39.target=int\ calculateMaxMoveDown(int,\ int,\ java.util.List,\ boolean)
comment39.text=\r\n\ Calculates\ the\ maximum\ possible\ downward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ down,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment4.params=
comment4.target=char[][]\ createCharEmptyList()
comment4.text=\r\nMethod\ to\ create\ a\ empty\ char\ list\ of\ lists\ representation\r\n\ @return\ a\ char[][]\ filled\ with\ '*'.\r\n
comment40.params=group\ isGluedOrStuck
comment40.target=int\ calculateMaxMoveDownGroup(java.util.List,\ boolean)
comment40.text=\r\n\ Calculates\ the\ maximum\ possible\ downward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ down,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment41.params=row\ column\ group\ isGluedOrStuck
comment41.target=int\ calculateMaxMoveLeft(int,\ int,\ java.util.List,\ boolean)
comment41.text=\r\n\ Calculates\ the\ maximum\ possible\ leftward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ left,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment42.params=group\ isGluedOrStuck
comment42.target=int\ calculateMaxMoveLeftGroup(java.util.List,\ boolean)
comment42.text=\r\n\ Calculates\ the\ maximum\ possible\ leftward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ left,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment43.params=row\ column\ group\ isGluedOrStuck
comment43.target=int\ calculateMaxMoveRight(int,\ int,\ java.util.List,\ boolean)
comment43.text=\r\n\ Calculates\ the\ maximum\ possible\ rightward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ right,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment44.params=group\ isGluedOrStuck
comment44.target=int\ calculateMaxMoveRightGroup(java.util.List,\ boolean)
comment44.text=\r\n\ Calculates\ the\ maximum\ possible\ rightward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ right,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment45.params=group\ steps
comment45.target=void\ moveGroupUp(java.util.List,\ int)
comment45.text=\r\n\ Moves\ a\ group\ of\ tiles\ upward\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ uppermost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ upward\r\n
comment46.params=group\ steps
comment46.target=void\ moveGroupDown(java.util.List,\ int)
comment46.text=\r\n\ Moves\ a\ group\ of\ tiles\ downward\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ bottom\ most\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ downward\r\n
comment47.params=group\ steps
comment47.target=void\ moveGroupLeft(java.util.List,\ int)
comment47.text=\r\n\ Moves\ a\ group\ of\ tiles\ to\ the\ left\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ leftmost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ to\ the\ left\r\n
comment48.params=group\ steps
comment48.target=void\ moveGroupRight(java.util.List,\ int)
comment48.text=\r\n\ Moves\ a\ group\ of\ tiles\ to\ the\ right\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ rightmost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ to\ the\ right\r\n
comment49.params=tile\ group
comment49.target=void\ collectStuckGroup(BaseTile,\ java.util.List)
comment49.text=\r\n\ Collects\ all\ tiles\ that\ are\ stuck\ together\ as\ a\ group,\ starting\ from\ the\ given\ tile.\r\n\ Uses\ depth-first\ search\ to\ recursively\ find\ connected\ tiles.\r\n\r\n\ @param\ tile\ The\ starting\ tile\r\n\ @param\ group\ List\ to\ store\ the\ collected\ tiles\r\n
comment5.params=board\ tileList\ startingBoard
comment5.target=void\ createTiles(char[][],\ java.util.List,\ boolean)
comment5.text=\r\n\ Method\ to\ create\ tiles\ in\ a\ list\ of\ lists,\ given\ the\ reference\ board.\r\n\ \r\n\ @param\ board\ Character\ matrix\ representing\ the\ board.\r\n\ @param\ tileList\ List\ of\ lists\ to\ store\ the\ created\ tiles.\r\n\ @param\ startingBoard\ boolean\ value\ to\ determinate\ if\ it\ is\ the\ starting\ or\ ending\ board\r\n
comment50.params=row\ column
comment50.target=BaseTile\ getTileAtPosition(int,\ int)
comment50.text=\r\n\ Retrieves\ the\ tile\ at\ a\ specific\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n\ @return\ The\ tile\ at\ the\ specified\ position,\ or\ null\ if\ out\ of\ bounds\r\n
comment51.params=tile
comment51.target=boolean\ isTileEmpty(BaseTile)
comment51.text=\r\n\ Checks\ if\ a\ given\ tile\ is\ empty.\r\n\r\n\ @param\ tile\ The\ tile\ to\ check\r\n\ @return\ True\ if\ the\ tile\ is\ empty,\ false\ otherwise\r\n
comment52.params=
comment52.target=void\ resetVisitedFlags()
comment52.text=\r\n\ Resets\ the\ "visited"\ flags\ for\ all\ tiles\ after\ a\ tilt\ operation.\r\n
comment53.params=row\ column
comment53.target=Tile\ createEmptyTile(int,\ int)
comment53.text=\r\n\ Creates\ an\ empty\ tile\ at\ the\ given\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n\ @return\ A\ new\ empty\ tile\r\n
comment54.params=message\ title
comment54.target=void\ showMessage(java.lang.String,\ java.lang.String)
comment54.text=\r\n\ Displays\ an\ error\ message\ if\ the\ simulator\ is\ visible.\r\n\ @param\ message\ The\ message\ to\ display.\r\n\ @param\ title\ The\ title\ of\ the\ message.\r\n
comment55.params=
comment55.target=boolean\ isGoal()
comment55.text=\r\n\ Checks\ if\ the\ puzzle\ has\ reached\ the\ goal\ state.\r\n\ Compares\ the\ current\ board\ (tiles)\ with\ the\ reference\ board\ (ending).\r\n\r\n\ @return\ True\ if\ the\ puzzle\ is\ in\ the\ goal\ state,\ false\ otherwise\r\n
comment56.params=
comment56.target=void\ makeVisible()
comment56.text=\r\n\ Makes\ the\ simulator\ visible.\r\n\ @throws\ PuzzleExceptions.makeVisibleInvisibleExceptions\ exceptions\ for\ starting\ and\ ending\ board\r\n
comment57.params=
comment57.target=void\ makeInvisible()
comment57.text=\r\n\ Makes\ the\ simulator\ invisible.\r\n\ @throws\ PuzzleExceptions.makeVisibleInvisibleExceptions\ exceptions\ for\ starting\ and\ ending\ board\r\n
comment58.params=
comment58.target=void\ finish()
comment58.text=\r\n\ Ends\ the\ simulator\ and\ exits\ the\ program.\r\n
comment59.params=
comment59.target=char[][]\ actualArrangement()
comment59.text=\r\n\ Returns\ a\ copy\ of\ the\ current\ puzzle\ board\ (starting),\ representing\ the\ current\ state.\r\n\r\n\ @return\ A\ copy\ of\ the\ starting\ matrix\r\n
comment6.params=
comment6.target=int\ getHeight()
comment6.text=\r\n\ Gets\ the\ height\ of\ the\ board.\r\n\ \r\n\ @return\ Height\ of\ the\ board.\r\n
comment60.params=
comment60.target=boolean\ ok()
comment60.text=\r\n\ Returns\ whether\ the\ last\ action\ was\ successful.\r\n\r\n\ @return\ True\ if\ the\ last\ action\ was\ successful,\ false\ otherwise\r\n
comment61.params=
comment61.target=void\ exchange()
comment61.text=\r\n\ Exchanges\ the\ current\ puzzle\ board\ with\ the\ reference\ board.\r\n\ Swaps\ the\ starting\ and\ ending\ matrices\ and\ updates\ the\ tiles\ visually.\r\n
comment62.params=row\ column
comment62.target=void\ makeHole(int,\ int)
comment62.text=\r\n\ Creates\ a\ hole\ in\ a\ specified\ tile\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n\ @throws\ PuzzleExceptions.makeHoleExceptions\ if\ a\ hole\ cannot\ be\ created\ due\ to\ specific\ conditions.\r\n\ @throws\ PuzzleExceptions.ExceedPuzzleSpaceException\ if\ the\ specified\ position\ exceeds\ the\ puzzle\ boundaries.\r\n
comment63.params=
comment63.target=void\ tilt()
comment63.text=\r\n\ Smart\ tilt\ method\ that\ performs\ an\ intelligent\ tilt\ to\ bring\ the\ puzzle\ closer\ to\ the\ solution.\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ tilt\ in\ an\ intelligent\ way\ needs\ to\ be\ handled\r\n
comment64.params=
comment64.target=char[][]\ getCurrentArrangement()
comment64.text=\r\n\ Private\ method\ to\ get\ the\ current\ board\ configuration.\r\n
comment65.params=startConfig\ goalConfig
comment65.target=java.util.List\ bfsSolve(char[][],\ char[][])
comment65.text=\r\n\ BFS\ implementation\ to\ find\ the\ sequence\ of\ tilts\ from\ the\ current\ configuration\ to\ the\ solution.\r\n
comment66.params=board
comment66.target=char[][]\ copyBoard(char[][])
comment66.text=\r\n\ Copy\ a\ board.\r\n
comment67.params=board1\ board2
comment67.target=boolean\ boardsEqual(char[][],\ char[][])
comment67.text=\r\n\ Check\ if\ two\ boards\ are\ equal.\r\n
comment68.params=board\ direction
comment68.target=char[][]\ tiltBoard(char[][],\ char)
comment68.text=\r\n\ Apply\ a\ tilt\ to\ a\ board\ and\ return\ the\ resulting\ new\ board.\r\n
comment69.params=direction
comment69.target=java.lang.String\ directionToString(char)
comment69.text=\r\n\ Convert\ the\ direction\ to\ a\ readable\ string.\r\n
comment7.params=
comment7.target=int\ getWidth()
comment7.text=\r\n\ Gets\ the\ width\ of\ the\ board.\r\n\ \r\n\ @return\ Width\ of\ the\ board.\r\n
comment70.params=tile
comment70.target=void\ createHoleCircle(BaseTile)
comment70.text=\r\n\ Creates\ a\ visual\ representation\ of\ a\ hole\ at\ the\ specified\ tile\ position.\r\n\r\n\ @param\ tile\ The\ tile\ to\ create\ the\ hole\ in\r\n
comment71.params=
comment71.target=int[][]\ fixedTiles()
comment71.text=\r\n\ Identifies\ and\ returns\ a\ matrix\ indicating\ the\ fixed\ tiles\ that\ cannot\ move.\r\n\ \r\n\ @return\ A\ matrix\ of\ fixed\ tiles,\ where\ 0\ indicates\ a\ fixed\ tile\ and\ 1\ indicates\ a\ movable\ tile.\r\n
comment72.params=row
comment72.target=boolean\ findEmptyTileOrHoleSegmentRow(int)
comment72.text=\r\n\ Finds\ an\ empty\ tile\ or\ a\ hole\ in\ the\ specified\ row.\r\n\ \r\n\ @param\ row\ The\ row\ index\ to\ check.\r\n\ @return\ true\ if\ an\ empty\ tile\ or\ a\ hole\ is\ found\ in\ the\ row,\ false\ otherwise.\r\n
comment73.params=col
comment73.target=boolean\ findEmptyTileOrHoleSegmentColumn(int)
comment73.text=\r\n\ Finds\ an\ empty\ tile\ or\ a\ hole\ in\ the\ specified\ column.\r\n\ \r\n\ @param\ col\ The\ column\ index\ to\ check.\r\n\ @return\ true\ if\ an\ empty\ tile\ or\ a\ hole\ is\ found\ in\ the\ column,\ false\ otherwise.\r\n
comment74.params=
comment74.target=int\ misplacedTiles()
comment74.text=\r\n\ Counts\ the\ number\ of\ misplaced\ tiles\ compared\ to\ the\ reference\ board.\r\n\r\n\ @return\ The\ number\ of\ misplaced\ tiles\r\n
comment75.params=args
comment75.target=void\ main(java.lang.String[])
comment8.params=tileData\ xPosition\ yPosition\ row\ column
comment8.target=BaseTile\ createTile(java.lang.String,\ int,\ int,\ int,\ int)
comment8.text=\r\n\ This\ method\ takes\ a\ string\ formatted\ as\ "[type\ label]",\ where\ the\ first\ character(s)\r\n\ represent\ the\ type\ of\ tile\ and\ the\ second\ part\ is\ the\ label\ of\ the\ tile.\r\n\r\n\ @param\ tileData\ A\ string\ containing\ the\ type\ and\ label\ of\ the\ tile,\ formatted\ as\ "[type\ label]".\r\n\ @param\ xPosition\ The\ x-coordinate\ position\ of\ the\ tile.\r\n\ @param\ yPosition\ The\ y-coordinate\ position\ of\ the\ tile.\r\n\ @param\ row\ The\ row\ index\ of\ the\ tile\ in\ the\ puzzle\ grid.\r\n\ @param\ column\ The\ column\ index\ of\ the\ tile\ in\ the\ puzzle\ grid.\r\n\ @return\ An\ instance\ of\ a\ subclass\ of\ BaseTile\ based\ on\ the\ type\ specified\ in\ tileData.\r\n\ \ \ \ \ \ \ \ \ If\ the\ type\ is\ unrecognized,\ a\ default\ Tile\ instance\ is\ returned.\r\n\r\n
comment9.params=row\ column\ label
comment9.target=void\ addTile(int,\ int,\ char)
comment9.text=\r\n\ Adds\ a\ tile\ to\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ Row\ index\ of\ the\ tile.\r\n\ @param\ column\ Column\ index\ of\ the\ tile.\r\n\ @param\ label\ Label\ of\ the\ tile.\r\n\ @throws\ PuzzleExceptions.addDeleteTileExceptions\ if\ the\ tile\ data\ is\ invalid\ or\ if\ the\ position\ is\ invalid.\r\n\ @throws\ PuzzleExceptions.ExceedPuzzleSpaceException\ if\ the\ specified\ position\ exceeds\ the\ puzzle\ dimensions.\ \ \r\n
numComments=76
