#BlueJ class context
comment0.target=Puzzle
comment1.params=h\ w
comment1.target=Puzzle(int,\ int)
comment10.params=fromTile\ toTile\ from\ to
comment10.target=void\ relocateTileMovement(Tile,\ Tile,\ int[],\ int[])
comment11.params=coords
comment11.target=boolean\ areValidCoordinates(int[])
comment12.params=row\ col
comment12.target=void\ addGlue(int,\ int)
comment13.params=row\ col
comment13.target=void\ deleteGlue(int,\ int)
comment14.params=tile
comment14.target=void\ updateAdjacentTiles(Tile)
comment15.params=tile
comment15.target=void\ updateAdjacentTilesAfterGlueRemoval(Tile)
comment16.params=tile
comment16.target=boolean\ isAdjacentToGlue(Tile)
comment17.params=color\ palenessFactor
comment17.target=java.awt.Color\ getPaleColor(java.awt.Color,\ int)
comment18.params=direction
comment18.target=void\ tilt(char)
comment19.params=col
comment19.target=void\ tiltUpWithGlue(int)
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment20.params=col
comment20.target=void\ tiltDownWithGlue(int)
comment21.params=row
comment21.target=void\ tiltLeftWithGlue(int)
comment22.params=row
comment22.target=void\ tiltRightWithGlue(int)
comment23.params=row\ col\ group\ isGluedOrStuck
comment23.target=int\ calculateMaxMoveUp(int,\ int,\ java.util.List,\ boolean)
comment24.params=group\ isGluedOrStuck
comment24.target=int\ calculateMaxMoveUpGroup(java.util.List,\ boolean)
comment25.params=tile\ steps
comment25.target=void\ moveTileUp(Tile,\ int)
comment26.params=group\ steps
comment26.target=void\ moveGroupUp(java.util.List,\ int)
comment27.params=group\ steps
comment27.target=void\ moveGroupDown(java.util.List,\ int)
comment28.params=group\ steps
comment28.target=void\ moveGroupRight(java.util.List,\ int)
comment29.params=group\ steps
comment29.target=void\ moveGroupLeft(java.util.List,\ int)
comment3.params=ending
comment3.target=Puzzle(char[][])
comment30.params=row\ col\ group\ isGluedOrStuck
comment30.target=int\ calculateMaxMoveDown(int,\ int,\ java.util.List,\ boolean)
comment31.params=group\ isGluedOrStuck
comment31.target=int\ calculateMaxMoveDownGroup(java.util.List,\ boolean)
comment32.params=row\ col\ group\ isGluedOrStuck
comment32.target=int\ calculateMaxMoveLeft(int,\ int,\ java.util.List,\ boolean)
comment33.params=group\ isGluedOrStuck
comment33.target=int\ calculateMaxMoveLeftGroup(java.util.List,\ boolean)
comment34.params=row\ col\ group\ isGluedOrStuck
comment34.target=int\ calculateMaxMoveRight(int,\ int,\ java.util.List,\ boolean)
comment35.params=group\ isGluedOrStuck
comment35.target=int\ calculateMaxMoveRightGroup(java.util.List,\ boolean)
comment36.params=tile\ group
comment36.target=void\ collectStuckGroup(Tile,\ java.util.List)
comment37.params=row\ col
comment37.target=Tile\ createEmptyTile(int,\ int)
comment38.params=row\ col
comment38.target=Tile\ getTileAtPosition(int,\ int)
comment39.params=tile
comment39.target=boolean\ isTileEmpty(Tile)
comment4.params=board\ tileList\ xOffset\ yOffset
comment4.target=void\ createTiles(char[][],\ java.util.List,\ int,\ int)
comment40.params=
comment40.target=void\ resetVisitedFlags()
comment41.params=message\ title
comment41.target=void\ showMessage(java.lang.String,\ java.lang.String)
comment42.params=
comment42.target=boolean\ isGoal()
comment43.params=
comment43.target=void\ makeVisible()
comment44.params=
comment44.target=void\ makeInvisible()
comment44.text=\r\n\ \ \ \ public\ void\ makeVisibleTiles()\ {\r\n\ \ \ \ \ \ \ \ this.visible\ \=\ true;\r\n\ \ \ \ \ \ \ \ for\ (List<Tile>\ row\ \:\ tiles)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (Tile\ tile\ \:\ row)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tile.makeVisible();\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ for\ (List<Tile>\ row\ \:\ referingTiles)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (Tile\ tile\ \:\ row)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tile.makeVisible();\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ this.ok\ \=\ true;\ \ //\ Indicar\ que\ la\ acci\u00F3n\ fue\ exitosa\r\n\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ public\ void\ makeVisibleRectangle(){\r\n\ \ \ \ \ \ \ \ //\ Verificar\ si\ los\ tableros\ han\ sido\ inicializados\r\n\ \ \ \ \ \ \ \ if\ (startingBoard\ \!\=\ null)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ startingBoard.makeVisible();\ \ //\ Hace\ visible\ el\ tablero\ inicial\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (endingBoard\ \!\=\ null)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ endingBoard.makeVisible();\ \ \ \ //\ Hace\ visible\ el\ tablero\ final\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ this.ok\ \=\ true;\ \ //\ Indicar\ que\ la\ acci\u00F3n\ fue\ exitosa\r\n\ \ \ \ }\r\n\ \ \ \ \r\n
comment45.params=
comment45.target=void\ finish()
comment45.text=\r\n\ \ \ \ public\ void\ makeInvisibleTiles()\ {\r\n\ \ \ \ \ \ \ \ this.visible\ \=\ false;\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ for\ (List<Tile>\ row\ \:\ tiles)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (Tile\ tile\ \:\ row)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tile.makeInvisible();\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ for\ (List<Tile>\ row\ \:\ referingTiles)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (Tile\ tile\ \:\ row)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tile.makeInvisible();\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ this.ok\ \=\ true;\ \ //\ Indicar\ que\ la\ acci\u00F3n\ fue\ exitosa\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ public\ void\ makeInvisibleRectangle(){\r\n\ \ \ \ \ \ \ \ //\ Verificar\ si\ los\ tableros\ han\ sido\ inicializados\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (startingBoard\ \!\=\ null)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ startingBoard.makeInvisible();\ \ //\ Hace\ invisible\ el\ tablero\ inicial\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (endingBoard\ \!\=\ null)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ endingBoard.makeInvisible();\ \ \ \ //\ Hace\ invisible\ el\ tablero\ final\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ this.ok\ \=\ true;\ \ //\ Indicar\ que\ la\ acci\u00F3n\ fue\ exitosa\r\n\ \ \ \ }\r\n\ \ \ \ \r\n
comment46.params=
comment46.target=char[][]\ actualArrangement()
comment46.text=\r\n\ Devuelve\ una\ copia\ de\ la\ matriz\ actual\ de\ edici\u00F3n\ (starting),\r\n\ representando\ el\ estado\ actual\ del\ puzzle\ y\ pinta\ las\ baldosas.\r\n\ @return\ Una\ copia\ de\ la\ matriz\ starting.\r\n
comment47.params=
comment47.target=boolean\ ok()
comment48.params=
comment48.target=void\ exchange()
comment49.params=row\ column
comment49.target=void\ makeHole(int,\ int)
comment5.params=
comment5.target=void\ createEmptyTiles()
comment50.params=
comment50.target=int\ misplacedTiles()
comment50.text=\r\n\ \ \ \ public\ int\ [][]\ fixedTiles(){\r\n\ \ \ \ \ \ \ \ List<int[]>\ fixedTilesPositions\ \=\ new\ ArrayList<>();\r\n\r\n\r\n\ \ \ \ \ \ \ \ for\ (int\ row\ \=\ 0;\ row\ <\ h;\ row++)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ for\ (int\ col\ \=\ 0;\ col\ <\ w;\ col++)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Tile\ tile\ \=\ getTileAtPosition(row,\ col);\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ (\!isTileEmpty(tile)\ &&\ (tile.hasGlue()\ ||\ tile.isStuck()))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ Agregar\ la\ posici\u00F3n\ a\ la\ lista\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ fixedTilesPositions.add(new\ int[]{row,\ col});\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ Hacer\ que\ la\ baldosa\ parpadee\ si\ el\ simulador\ est\u00E1\ visible\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ (visible)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tile.blink();\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\r\n\ \ \ \ \ \ \ \ //\ Convertir\ la\ lista\ a\ un\ arreglo\ bidimensional\r\n\ \ \ \ \ \ \ \ int[][]\ result\ \=\ new\ int[fixedTilesPositions.Tile.SIZE()][2];\r\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 0;\ i\ <\ fixedTilesPositions.Tile.SIZE();\ i++)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ result[i]\ \=\ fixedTilesPositions.get(i);\r\n\ \ \ \ \ \ \ \ }\r\n\r\n\ \ \ \ \ \ \ \ return\ result;\r\n\ \ \ \ }\r\n
comment51.params=args
comment51.target=void\ main(java.lang.String[])
comment6.params=
comment6.target=void\ createEmptyreferingTiles()
comment7.params=row\ column\ label
comment7.target=void\ addTile(int,\ int,\ char)
comment8.params=row\ column
comment8.target=void\ deleteTile(int,\ int)
comment9.params=from\ to
comment9.target=void\ relocateTile(int[],\ int[])
numComments=52
