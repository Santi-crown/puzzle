#BlueJ class context
comment0.target=PuzzleContest
comment0.text=\r\n\ Here\ is\ the\ class\ that\ solves\ Cycle\ 3\ where\ in\ this\ cycle\ exists\ two\ methods\ simulate\ and\ solve\ simulator\ problem.\r\n\r\n\ @author\:\ Andersson\ David\ S\u00E1nchez\ M\u00E9ndez\r\n\ @author\:\ Cristian\ Santiago\ Pedraza\ Rodr\u00EDguez\r\n\ @version\ 2024\r\n
comment1.params=starting\ ending
comment1.target=boolean\ solve(char[][],\ char[][])
comment1.text=\r\n\ Method\ to\ determine\ if\ the\ puzzle\ can\ be\ solved\ from\ the\ starting\ configuration\ to\ the\ ending\ configuration.\r\n\ Uses\ BFS\ to\ find\ if\ there\ is\ a\ sequence\ of\ tilts\ that\ transforms\ the\ starting\ board\ into\ the\ ending\ board.\r\n\r\n\ @param\ starting\ The\ starting\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @param\ ending\ The\ ending\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @return\ True\ if\ the\ puzzle\ can\ be\ solved,\ false\ otherwise.\r\n
comment10.params=puzzle
comment10.target=void\ printBoard(Puzzle)
comment10.text=\r\n\ Print\ the\ current\ board\ state\ of\ the\ puzzle.\r\n\r\n\ @param\ puzzle\ The\ puzzle\ instance\ to\ print.\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ Main\ method\ for\ testing\ the\ PuzzleContest\ class.\r\n\ \r\n\ @param\ args\ Command-line\ arguments\ (not\ used).\r\n\ @throws\ PuzzleExceptions.makeVisibleInvisibleExceptions\ here\ it\ encloses\ exception\ messages\ for\ makeVisible\ and\ makeInvisible\ methods.\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ exception\ to\ validate\ tilt\ perfectly\ in\ simulate\ method\r\n
comment2.params=starting\ ending
comment2.target=void\ simulate(char[][],\ char[][])
comment2.text=\r\n\ Method\ to\ simulate\ the\ solution\ by\ showing\ each\ step\ from\ the\ starting\ configuration\ to\ the\ ending\ configuration.\r\n\ It\ first\ checks\ if\ a\ solution\ exists,\ then\ applies\ the\ sequence\ of\ tilts\ step\ by\ step,\ displaying\ the\ intermediate\ configurations.\r\n\r\n\ @param\ starting\ The\ starting\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @param\ ending\ The\ ending\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @throws\ PuzzleExceptions.makeVisibleInvisibleExceptions\ here\ it\ encloses\ exception\ messages\ for\ makeVisible\ and\ makeInvisible\ methods\r\n\ @throws\ PuzzleExceptions.addDeleteGlueExceptions\ \ exception\ to\ validate\ tilt\ correctly\r\n
comment3.params=starting\ ending
comment3.target=java.util.List\ bfsSolve(char[][],\ char[][])
comment3.text=\r\n\ Breadth-First\ Search\ (BFS)\ implementation\ to\ find\ the\ sequence\ of\ tilts\ that\ transforms\ the\ starting\ board\ into\ the\ ending\ board.\r\n\r\n\ @param\ starting\ The\ starting\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @param\ ending\ The\ ending\ configuration\ of\ the\ puzzle\ as\ a\ 2D\ char\ array.\r\n\ @return\ A\ list\ of\ characters\ representing\ the\ sequence\ of\ tilts,\ or\ null\ if\ no\ solution\ is\ found.\r\n
comment4.params=board1\ board2
comment4.target=boolean\ boardsEqual(char[][],\ char[][])
comment4.text=\r\n\ Check\ if\ two\ boards\ are\ equal.\r\n\r\n\ @param\ board1\ The\ first\ board.\r\n\ @param\ board2\ The\ second\ board.\r\n\ @return\ True\ if\ both\ boards\ are\ equal,\ false\ otherwise.\r\n
comment5.params=board
comment5.target=char[][]\ copyBoard(char[][])
comment5.text=\r\n\ Copy\ a\ board.\r\n\r\n\ @param\ board\ The\ board\ to\ copy.\r\n\ @return\ A\ copy\ of\ the\ given\ board.\r\n
comment6.params=starting\ ending
comment6.target=boolean\ tileCountsMatch(char[][],\ char[][])
comment6.text=\r\n\ Check\ if\ the\ tile\ counts\ match\ between\ two\ boards.\r\n\r\n\ @param\ starting\ The\ starting\ board.\r\n\ @param\ ending\ The\ ending\ board.\r\n\ @return\ True\ if\ the\ tile\ counts\ match,\ false\ otherwise.\r\n
comment7.params=board
comment7.target=java.util.Map\ countTiles(char[][])
comment7.text=\r\n\ Count\ the\ tiles\ of\ each\ color\ on\ a\ board.\r\n\r\n\ @param\ board\ The\ board\ to\ count\ tiles\ on.\r\n\ @return\ A\ map\ of\ tile\ colors\ and\ their\ respective\ counts.\r\n
comment8.params=board\ direction
comment8.target=char[][]\ tiltBoard(char[][],\ char)
comment8.text=\r\n\ Apply\ a\ tilt\ to\ a\ board\ and\ return\ the\ new\ board.\r\n\r\n\ @param\ board\ The\ current\ board.\r\n\ @param\ direction\ The\ direction\ of\ the\ tilt\ ('u',\ 'd',\ 'l',\ 'r').\r\n\ @return\ The\ new\ board\ after\ applying\ the\ tilt.\r\n
comment9.params=direction
comment9.target=java.lang.String\ directionToString(char)
comment9.text=\r\n\ Convert\ the\ direction\ character\ to\ a\ readable\ string.\r\n\r\n\ @param\ direction\ The\ direction\ character\ ('u',\ 'd',\ 'l',\ 'r').\r\n\ @return\ The\ string\ representation\ of\ the\ direction.\r\n
numComments=12
