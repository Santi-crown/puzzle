#BlueJ class context
comment0.target=Puzzle
comment0.text=\r\n\ This\ class\ represents\ a\ puzzle\ simulator\ with\ tiles,\ including\ initial\ and\ final\ boards,\r\n\ movable\ tiles,\ holes,\ and\ glue.\ It\ allows\ operations\ such\ as\ adding,\ removing,\ moving\ tiles,\r\n\ and\ applying\ or\ removing\ glue.\r\n\r\n\ @author\ Andersson\ David\ S\u00E1nchez\ M\u00E9ndez\r\n\ @author\ Cristian\ Santiago\ Pedraza\ Rodr\u00EDguez\r\n\r\n\ @version\ 2024\r\n
comment1.params=h\ w
comment1.target=Puzzle(int,\ int)
comment1.text=\r\n\ Constructor\ to\ initialize\ the\ boards\ without\ initial\ and\ final\ matrices.\r\n\ \r\n\ @param\ h\ Height\ of\ the\ board.\r\n\ @param\ w\ Width\ of\ the\ board.\r\n
comment10.params=row\ column
comment10.target=void\ deleteTile(int,\ int)
comment10.text=\r\n\ Removes\ a\ tile\ from\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ Row\ index\ of\ the\ tile.\r\n\ @param\ column\ Column\ index\ of\ the\ tile.\r\n
comment11.params=from\ to
comment11.target=void\ relocateTile(int[],\ int[])
comment11.text=\r\n\ Relocates\ a\ tile\ from\ the\ given\ source\ position\ to\ the\ destination\ position.\r\n\ \r\n\ @param\ from\ the\ coordinates\ of\ the\ source\ position\ as\ an\ integer\ array\ [row,\ col].\r\n\ @param\ to\ \ \ the\ coordinates\ of\ the\ destination\ position\ as\ an\ integer\ array\ [row,\ col].\r\n
comment12.params=fromTile\ toTile\ from\ to
comment12.target=void\ relocateTileMovement(Tile,\ Tile,\ int[],\ int[])
comment12.text=\r\n\ Performs\ the\ visual\ and\ logical\ movement\ of\ a\ tile\ from\ one\ position\ to\ another.\r\n\ \r\n\ @param\ fromTile\ the\ tile\ to\ be\ moved\ from\ the\ source\ position.\r\n\ @param\ toTile\ \ \ the\ tile\ at\ the\ destination\ position\ (empty).\r\n\ @param\ from\ \ \ \ \ the\ source\ coordinates\ as\ an\ integer\ array\ [row,\ col].\r\n\ @param\ to\ \ \ \ \ \ \ the\ destination\ coordinates\ as\ an\ integer\ array\ [row,\ col].\r\n
comment13.params=coords
comment13.target=boolean\ areValidCoordinates(int[])
comment13.text=\r\n\ Validates\ whether\ the\ given\ coordinates\ are\ within\ the\ bounds\ of\ the\ board.\r\n\ \r\n\ @param\ coords\ the\ coordinates\ to\ validate\ as\ an\ integer\ array\ [row,\ col].\r\n\ @return\ {@code\ true}\ if\ the\ coordinates\ are\ valid;\ {@code\ false}\ otherwise.\r\n
comment14.params=row\ column
comment14.target=void\ addGlue(int,\ int)
comment14.text=\r\n\ Applies\ glue\ to\ a\ tile\ at\ the\ specified\ position.\r\n\r\n\ @param\ row\ the\ row\ of\ the\ tile.\r\n\ @param\ column\ the\ column\ of\ the\ tile.\r\n
comment15.params=row\ column
comment15.target=void\ deleteGlue(int,\ int)
comment15.text=\r\n\ Removes\ glue\ from\ a\ tile\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ the\ row\ of\ the\ tile.\r\n\ @param\ column\ the\ column\ of\ the\ tile.\r\n
comment16.params=tile
comment16.target=void\ updateAdjacentTiles(Tile)
comment16.text=\r\n\ Updates\ the\ adjacent\ tiles\ after\ applying\ glue\ to\ a\ tile.\r\n\ \r\n\ @param\ tile\ the\ tile\ to\ which\ glue\ has\ been\ applied.\r\n
comment17.params=tile
comment17.target=void\ updateAdjacentTilesAfterGlueRemoval(Tile)
comment17.text=\r\n\ Updates\ the\ adjacent\ tiles\ after\ removing\ glue\ from\ a\ tile.\r\n\ \r\n\ @param\ tile\ the\ tile\ from\ which\ glue\ has\ been\ removed.\r\n
comment18.params=tile
comment18.target=boolean\ isAdjacentToGlue(Tile)
comment18.text=\r\n\ Checks\ if\ a\ tile\ is\ adjacent\ to\ any\ tile\ with\ glue\ applied.\r\n\ \r\n\ @param\ tile\ the\ tile\ to\ check.\r\n\ @return\ {@code\ true}\ if\ adjacent\ to\ a\ tile\ with\ glue;\ {@code\ false}\ otherwise.\r\n
comment19.params=color\ palenessFactor
comment19.target=java.awt.Color\ getPaleColor(java.awt.Color,\ int)
comment19.text=\r\n\ Generates\ a\ paler\ version\ of\ the\ given\ color\ based\ on\ the\ paleness\ factor.\r\n\ \r\n\ @param\ color\ the\ original\ color.\r\n\ @param\ palenessFactor\ the\ amount\ to\ increase\ each\ RGB\ component.\r\n\ @return\ a\ new\ {@code\ Color}\ object\ with\ adjusted\ RGB\ values.\r\n
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment2.text=\r\n\ Constructor\ to\ initialize\ the\ boards\ with\ initial\ and\ final\ character\ matrices.\r\n\ \r\n\ @param\ starting\ Initial\ state\ of\ the\ board.\r\n\ @param\ ending\ Final\ state\ of\ the\ board.\r\n
comment20.params=direction
comment20.target=void\ tilt(char)
comment20.text=\r\n\ Tilts\ the\ board\ in\ the\ specified\ direction.\r\n\ \r\n\ @param\ direction\ the\ direction\ to\ tilt\ ('d'\ for\ down,\ 'u'\ for\ up,\ 'r'\ for\ right,\ 'l'\ for\ left).\r\n
comment21.params=direction
comment21.target=boolean\ tiltOnce(char)
comment21.text=\r\n\ Performs\ a\ single\ tilt\ in\ the\ specified\ direction.\r\n\ \r\n\ @param\ direction\ the\ direction\ to\ tilt\ ('d'\ for\ down,\ 'u'\ for\ up,\ 'r'\ for\ right,\ 'l'\ for\ left).\r\n\ @return\ {@code\ true}\ if\ there\ were\ changes;\ {@code\ false}\ otherwise.\r\n
comment22.params=col
comment22.target=void\ tiltUpWithGlue(int)
comment22.text=\r\n\ Tilts\ the\ specified\ column\ upwards,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ col\ the\ column\ to\ tilt\ upwards.\r\n
comment23.params=col
comment23.target=void\ tiltDownWithGlue(int)
comment23.text=\r\n\ Tilts\ the\ specified\ column\ downwards,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ col\ the\ column\ to\ tilt\ downwards.\r\n
comment24.params=row
comment24.target=void\ tiltLeftWithGlue(int)
comment24.text=\r\n\ Tilts\ the\ specified\ row\ to\ the\ left,\ handling\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ row\ the\ row\ to\ tilt\ to\ the\ left.\r\n
comment25.params=row
comment25.target=void\ tiltRightWithGlue(int)
comment25.text=\r\n\ Tilts\ the\ specified\ row\ to\ the\ right,\ considering\ glue\ and\ stuck\ tiles.\r\n\ \r\n\ @param\ row\ the\ row\ index\ to\ tilt\ to\ the\ right.\r\n
comment26.params=row\ column\ group\ isGluedOrStuck
comment26.target=int\ calculateMaxMoveUp(int,\ int,\ java.util.List,\ boolean)
comment26.text=\r\n\ Calculates\ the\ maximum\ possible\ upward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ up,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment27.params=group\ isGluedOrStuck
comment27.target=int\ calculateMaxMoveUpGroup(java.util.List,\ boolean)
comment27.text=\r\n\ Calculates\ the\ maximum\ possible\ upward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ up,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment28.params=row\ column\ group\ isGluedOrStuck
comment28.target=int\ calculateMaxMoveDown(int,\ int,\ java.util.List,\ boolean)
comment28.text=\r\n\ Calculates\ the\ maximum\ possible\ downward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ down,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment29.params=group\ isGluedOrStuck
comment29.target=int\ calculateMaxMoveDownGroup(java.util.List,\ boolean)
comment29.text=\r\n\ Calculates\ the\ maximum\ possible\ downward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ down,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment3.params=ending
comment3.target=Puzzle(char[][])
comment3.text=\r\n\ Constructor\ to\ initialize\ an\ empty\ initial\ board\ and\ a\ final\ board\ with\ tiles.\r\n\ \r\n\ @param\ ending\ Final\ state\ of\ the\ board.\r\n
comment30.params=row\ column\ group\ isGluedOrStuck
comment30.target=int\ calculateMaxMoveLeft(int,\ int,\ java.util.List,\ boolean)
comment30.text=\r\n\ Calculates\ the\ maximum\ possible\ leftward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ left,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment31.params=group\ isGluedOrStuck
comment31.target=int\ calculateMaxMoveLeftGroup(java.util.List,\ boolean)
comment31.text=\r\n\ Calculates\ the\ maximum\ possible\ leftward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ left,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment32.params=row\ column\ group\ isGluedOrStuck
comment32.target=int\ calculateMaxMoveRight(int,\ int,\ java.util.List,\ boolean)
comment32.text=\r\n\ Calculates\ the\ maximum\ possible\ rightward\ movement\ for\ a\ tile.\r\n\r\n\ @param\ row\ The\ current\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ current\ column\ of\ the\ tile.\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tile\ is\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ tile\ can\ move\ right,\ or\ -1\ if\ it\ would\ fall\ into\ a\ hole.\r\n
comment33.params=group\ isGluedOrStuck
comment33.target=int\ calculateMaxMoveRightGroup(java.util.List,\ boolean)
comment33.text=\r\n\ Calculates\ the\ maximum\ possible\ rightward\ movement\ for\ a\ group\ of\ tiles.\r\n\r\n\ @param\ group\ The\ group\ of\ tiles\ that\ are\ considered\ to\ be\ moving\ together.\r\n\ @param\ isGluedOrStuck\ Indicates\ if\ the\ tiles\ are\ glued\ or\ stuck.\r\n\ @return\ The\ maximum\ number\ of\ steps\ the\ group\ can\ move\ right,\ or\ -1\ if\ any\ tile\ would\ fall\ into\ a\ hole.\r\n
comment34.params=group\ steps
comment34.target=void\ moveGroupUp(java.util.List,\ int)
comment34.text=\r\n\ Moves\ a\ group\ of\ tiles\ upward\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ uppermost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ upward\r\n
comment35.params=group\ steps
comment35.target=void\ moveGroupDown(java.util.List,\ int)
comment35.text=\r\n\ Moves\ a\ group\ of\ tiles\ downward\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ bottommost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ downward\r\n
comment36.params=group\ steps
comment36.target=void\ moveGroupLeft(java.util.List,\ int)
comment36.text=\r\n\ Moves\ a\ group\ of\ tiles\ to\ the\ left\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ leftmost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ to\ the\ left\r\n
comment37.params=group\ steps
comment37.target=void\ moveGroupRight(java.util.List,\ int)
comment37.text=\r\n\ Moves\ a\ group\ of\ tiles\ to\ the\ right\ by\ a\ specified\ number\ of\ steps.\r\n\ The\ tiles\ are\ sorted\ such\ that\ the\ rightmost\ tiles\ move\ first.\r\n\r\n\ @param\ group\ List\ of\ tiles\ to\ be\ moved\r\n\ @param\ steps\ Number\ of\ steps\ to\ move\ to\ the\ right\r\n
comment38.params=tile\ group
comment38.target=void\ collectStuckGroup(Tile,\ java.util.List)
comment38.text=\r\n\ Collects\ all\ tiles\ that\ are\ stuck\ together\ as\ a\ group,\ starting\ from\ the\ given\ tile.\r\n\ Uses\ depth-first\ search\ to\ recursively\ find\ connected\ tiles.\r\n\r\n\ @param\ tile\ The\ starting\ tile\r\n\ @param\ group\ List\ to\ store\ the\ collected\ tiles\r\n
comment39.params=row\ column
comment39.target=Tile\ getTileAtPosition(int,\ int)
comment39.text=\r\n\ Retrieves\ the\ tile\ at\ a\ specific\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n\ @return\ The\ tile\ at\ the\ specified\ position,\ or\ null\ if\ out\ of\ bounds\r\n
comment4.params=board\ tileList\ xOffset\ yOffset
comment4.target=void\ createTiles(char[][],\ java.util.List,\ int,\ int)
comment4.text=\r\n\ Method\ to\ create\ tiles\ in\ a\ list\ of\ lists,\ given\ the\ reference\ board.\r\n\ \r\n\ @param\ board\ Character\ matrix\ representing\ the\ board.\r\n\ @param\ tileList\ List\ of\ lists\ to\ store\ the\ created\ tiles.\r\n\ @param\ xOffset\ X\ offset\ for\ positioning\ the\ tiles.\r\n\ @param\ yOffset\ Y\ offset\ for\ positioning\ the\ tiles.\r\n
comment40.params=tile
comment40.target=boolean\ isTileEmpty(Tile)
comment40.text=\r\n\ Checks\ if\ a\ given\ tile\ is\ empty.\r\n\r\n\ @param\ tile\ The\ tile\ to\ check\r\n\ @return\ True\ if\ the\ tile\ is\ empty,\ false\ otherwise\r\n
comment41.params=
comment41.target=void\ resetVisitedFlags()
comment41.text=\r\n\ Resets\ the\ "visited"\ flags\ for\ all\ tiles\ after\ a\ tilt\ operation.\r\n
comment42.params=row\ column
comment42.target=Tile\ createEmptyTile(int,\ int)
comment42.text=\r\n\ Creates\ an\ empty\ tile\ at\ the\ given\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n\ @return\ A\ new\ empty\ tile\r\n
comment43.params=message\ title
comment43.target=void\ showMessage(java.lang.String,\ java.lang.String)
comment43.text=\r\n\ Displays\ an\ error\ message\ if\ the\ simulator\ is\ visible.\r\n\ @param\ message\ The\ message\ to\ display.\r\n\ @param\ title\ The\ title\ of\ the\ message.\r\n
comment44.params=
comment44.target=boolean\ isGoal()
comment44.text=\r\n\ Checks\ if\ the\ puzzle\ has\ reached\ the\ goal\ state.\r\n\ Compares\ the\ current\ board\ (tiles)\ with\ the\ reference\ board\ (ending).\r\n\r\n\ @return\ True\ if\ the\ puzzle\ is\ in\ the\ goal\ state,\ false\ otherwise\r\n
comment45.params=
comment45.target=void\ makeVisible()
comment45.text=\r\n\ Makes\ the\ simulator\ visible.\r\n
comment46.params=
comment46.target=void\ makeInvisible()
comment46.text=\r\n\ Makes\ the\ simulator\ invisible.\r\n
comment47.params=
comment47.target=void\ finish()
comment47.text=\r\n\ Ends\ the\ simulator\ and\ exits\ the\ program.\r\n
comment48.params=
comment48.target=char[][]\ actualArrangement()
comment48.text=\r\n\ Returns\ a\ copy\ of\ the\ current\ puzzle\ board\ (starting),\ representing\ the\ current\ state.\r\n\r\n\ @return\ A\ copy\ of\ the\ starting\ matrix\r\n
comment49.params=
comment49.target=boolean\ ok()
comment49.text=\r\n\ Returns\ whether\ the\ last\ action\ was\ successful.\r\n\r\n\ @return\ True\ if\ the\ last\ action\ was\ successful,\ false\ otherwise\r\n
comment5.params=
comment5.target=void\ createEmptyTiles()
comment5.text=\r\n\ Method\ to\ create\ empty\ tiles\ on\ the\ initial\ board.\r\n
comment50.params=
comment50.target=void\ exchange()
comment50.text=\r\n\ Exchanges\ the\ current\ puzzle\ board\ with\ the\ reference\ board.\r\n\ Swaps\ the\ starting\ and\ ending\ matrices\ and\ updates\ the\ tiles\ visually.\r\n
comment51.params=row\ column
comment51.target=void\ makeHole(int,\ int)
comment51.text=\r\n\ Creates\ a\ hole\ in\ a\ specified\ tile\ position.\r\n\r\n\ @param\ row\ Row\ index\r\n\ @param\ column\ Column\ index\r\n
comment52.params=tile
comment52.target=void\ createHoleCircle(Tile)
comment52.text=\r\n\ Creates\ a\ visual\ representation\ of\ a\ hole\ at\ the\ specified\ tile\ position.\r\n\r\n\ @param\ tile\ The\ tile\ to\ create\ the\ hole\ in\r\n
comment53.params=
comment53.target=int[][]\ fixedTiles()
comment53.text=\r\n\ Identifies\ and\ returns\ a\ matrix\ indicating\ the\ fixed\ tiles\ that\ cannot\ move.\r\n\ \r\n\ @return\ A\ matrix\ of\ fixed\ tiles,\ where\ 0\ indicates\ a\ fixed\ tile\ and\ 1\ indicates\ a\ movable\ tile.\r\n
comment54.params=row
comment54.target=boolean\ findEmptyTileOrHoleSegmentRow(int)
comment54.text=\r\n\ Finds\ an\ empty\ tile\ or\ a\ hole\ in\ the\ specified\ row.\r\n\ \r\n\ @param\ row\ The\ row\ index\ to\ check.\r\n\ @return\ true\ if\ an\ empty\ tile\ or\ a\ hole\ is\ found\ in\ the\ row,\ false\ otherwise.\r\n
comment55.params=col
comment55.target=boolean\ findEmptyTileOrHoleSegmentColumn(int)
comment55.text=\r\n\ Finds\ an\ empty\ tile\ or\ a\ hole\ in\ the\ specified\ column.\r\n\ \r\n\ @param\ col\ The\ column\ index\ to\ check.\r\n\ @return\ true\ if\ an\ empty\ tile\ or\ a\ hole\ is\ found\ in\ the\ column,\ false\ otherwise.\r\n
comment56.params=
comment56.target=int\ misplacedTiles()
comment56.text=\r\n\ Counts\ the\ number\ of\ misplaced\ tiles\ compared\ to\ the\ reference\ board.\r\n\r\n\ @return\ The\ number\ of\ misplaced\ tiles\r\n
comment57.params=
comment57.target=void\ tilt()
comment57.text=\r\n\ M\u00E9todo\ smartTilt\ que\ realiza\ un\ tilt\ inteligente\ para\ acercar\ el\ puzzle\ a\ la\ soluci\u00F3n.\r\n
comment58.params=
comment58.target=char[][]\ getCurrentArrangement()
comment58.text=\r\n\ M\u00E9todo\ privado\ para\ obtener\ la\ configuraci\u00F3n\ actual\ del\ tablero.\r\n
comment59.params=starting\ ending
comment59.target=java.util.List\ bfsSolve(char[][],\ char[][])
comment59.text=\r\n\ Implementaci\u00F3n\ de\ BFS\ para\ encontrar\ la\ secuencia\ de\ inclinaciones\ desde\ la\ configuraci\u00F3n\ actual\ hasta\ la\ soluci\u00F3n.\r\n
comment6.params=
comment6.target=void\ createEmptyreferingTiles()
comment6.text=\r\n\ Method\ to\ create\ empty\ reference\ tiles\ on\ the\ reference\ board.\r\n
comment60.params=board
comment60.target=char[][]\ copyBoard(char[][])
comment60.text=\r\n\ Copiar\ un\ tablero.\r\n
comment61.params=board1\ board2
comment61.target=boolean\ boardsEqual(char[][],\ char[][])
comment61.text=\r\n\ Verificar\ si\ dos\ tableros\ son\ iguales.\r\n
comment62.params=board\ direction
comment62.target=char[][]\ tiltBoard(char[][],\ char)
comment62.text=\r\n\ Aplicar\ una\ inclinaci\u00F3n\ a\ un\ tablero\ y\ devolver\ el\ nuevo\ tablero\ resultante.\r\n
comment63.params=direction
comment63.target=java.lang.String\ directionToString(char)
comment63.text=\r\n\ Convertir\ la\ direcci\u00F3n\ a\ una\ cadena\ legible.\r\n
comment64.params=args
comment64.target=void\ main(java.lang.String[])
comment7.params=
comment7.target=int\ getHeight()
comment7.text=\r\n\ Gets\ the\ height\ of\ the\ board.\r\n\ \r\n\ @return\ Height\ of\ the\ board.\r\n
comment8.params=
comment8.target=int\ getWidth()
comment8.text=\r\n\ Gets\ the\ width\ of\ the\ board.\r\n\ \r\n\ @return\ Width\ of\ the\ board.\r\n
comment9.params=row\ column\ label
comment9.target=void\ addTile(int,\ int,\ char)
comment9.text=\r\n\ Adds\ a\ tile\ to\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ Row\ index\ of\ the\ tile.\r\n\ @param\ column\ Column\ index\ of\ the\ tile.\r\n\ @param\ label\ Label\ of\ the\ tile.\r\n
numComments=65
