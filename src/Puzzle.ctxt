#BlueJ class context
comment0.target=Puzzle
comment1.params=rows\ cols
comment1.target=Puzzle(int,\ int)
comment10.params=row\ col
comment10.target=void\ deleteGlue(int,\ int)
comment11.params=tile
comment11.target=void\ updateAdjacentTiles(Tile)
comment12.params=tile
comment12.target=void\ updateAdjacentTilesAfterGlueRemoval(Tile)
comment13.params=tile
comment13.target=boolean\ isAdjacentToGlue(Tile)
comment14.params=color\ palenessFactor
comment14.target=java.awt.Color\ getPaleColor(java.awt.Color,\ int)
comment15.params=direction
comment15.target=void\ tilt(char)
comment16.params=col
comment16.target=void\ tiltUpWithGlue(int)
comment17.params=col
comment17.target=void\ tiltDownWithGlue(int)
comment18.params=row
comment18.target=void\ tiltRightWithGlue(int)
comment19.params=row
comment19.target=void\ tiltLeftWithGlue(int)
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment20.params=row\ col\ group
comment20.target=int\ calculateMaxMoveUp(int,\ int,\ java.util.List)
comment21.params=group
comment21.target=int\ calculateMaxMoveUpGroup(java.util.List)
comment22.params=tile\ steps
comment22.target=void\ moveTileUp(Tile,\ int)
comment23.params=group\ steps
comment23.target=void\ moveGroupUp(java.util.List,\ int)
comment24.params=row\ col\ group
comment24.target=int\ calculateMaxMoveDown(int,\ int,\ java.util.List)
comment25.params=group
comment25.target=int\ calculateMaxMoveDownGroup(java.util.List)
comment26.params=tile\ steps
comment26.target=void\ moveTileDown(Tile,\ int)
comment27.params=group\ steps
comment27.target=void\ moveGroupDown(java.util.List,\ int)
comment28.params=row\ col\ group
comment28.target=int\ calculateMaxMoveRight(int,\ int,\ java.util.List)
comment29.params=group
comment29.target=int\ calculateMaxMoveRightGroup(java.util.List)
comment3.params=
comment3.target=void\ printBoardState()
comment30.params=tile\ steps
comment30.target=void\ moveTileRight(Tile,\ int)
comment31.params=group\ steps
comment31.target=void\ moveGroupRight(java.util.List,\ int)
comment32.params=row\ col\ group
comment32.target=int\ calculateMaxMoveLeft(int,\ int,\ java.util.List)
comment33.params=group
comment33.target=int\ calculateMaxMoveLeftGroup(java.util.List)
comment34.params=tile\ steps
comment34.target=void\ moveTileLeft(Tile,\ int)
comment35.params=group\ steps
comment35.target=void\ moveGroupLeft(java.util.List,\ int)
comment36.params=tile\ group
comment36.target=void\ collectStuckGroup(Tile,\ java.util.List)
comment37.params=row\ col
comment37.target=Tile\ createEmptyTile(int,\ int)
comment38.params=row\ col
comment38.target=Tile\ getTileAtPosition(int,\ int)
comment39.params=tile
comment39.target=boolean\ isTileEmpty(Tile)
comment4.params=row\ column\ label
comment4.target=void\ addTile(int,\ int,\ char)
comment40.params=
comment40.target=void\ resetVisitedFlags()
comment41.params=message\ title
comment41.target=void\ showMessage(java.lang.String,\ java.lang.String)
comment42.params=
comment42.target=boolean\ isGoal()
comment43.params=
comment43.target=void\ makeVisible()
comment44.params=
comment44.target=void\ makeInvisible()
comment45.params=
comment45.target=void\ finish()
comment46.params=
comment46.target=char[][]\ actualArrangement()
comment46.text=\r\n\ Devuelve\ una\ copia\ de\ la\ matriz\ actual\ de\ edici\u00F3n\ (starting),\r\n\ representando\ el\ estado\ actual\ del\ puzzle\ y\ pinta\ las\ baldosas.\r\n\ @return\ Una\ copia\ de\ la\ matriz\ starting.\r\n
comment47.params=
comment47.target=boolean\ ok()
comment48.params=args
comment48.target=void\ main(java.lang.String[])
comment5.params=row\ column
comment5.target=void\ deleteTile(int,\ int)
comment6.params=from\ to
comment6.target=void\ relocateTile(int[],\ int[])
comment7.params=fromTile\ toTile\ from\ to
comment7.target=void\ relocateTileMovement(Tile,\ Tile,\ int[],\ int[])
comment8.params=coords
comment8.target=boolean\ areValidCoordinates(int[])
comment9.params=row\ col
comment9.target=void\ addGlue(int,\ int)
numComments=49
