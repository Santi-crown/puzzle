#BlueJ class context
comment0.target=Puzzle
comment1.params=rows\ cols
comment1.target=Puzzle(int,\ int)
comment10.params=row\ col
comment10.target=void\ tiltDown(int,\ int)
comment11.params=row\ col
comment11.target=void\ tiltUp(int,\ int)
comment12.params=row\ col
comment12.target=void\ tiltRight(int,\ int)
comment13.params=row\ col
comment13.target=void\ tiltLeft(int,\ int)
comment14.params=row\ col
comment14.target=Tile\ getTileAtPosition(int,\ int)
comment15.params=message\ title
comment15.target=void\ showMessage(java.lang.String,\ java.lang.String)
comment15.text=\r\n\ \ \ \ \ \ \ \ //\ M\u00E9todo\ para\ adicionar\ pegante\ a\ una\ baldosa\ y\ baldosas\ adyacentes\r\n\ \ \ \ public\ void\ addGlue(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ applyGlue(row,\ col);\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ true;\ //Accion\ exitosa\r\n\ \ \ \ \ \ \ \ }\ else\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ showMessage("La\ baldosa\ en\ esa\ posici\u00F3n\ no\ existe.",\ "Error");\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ false;\ //Error\ message\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row\ +\ 1,\ col))\ applyGlue(row\ +\ 1,\ col);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row\ -\ 1,\ col))\ applyGlue(row\ -\ 1,\ col);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col\ +\ 1))\ applyGlue(row,\ col\ +\ 1);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col\ -\ 1))\ applyGlue(row,\ col\ -\ 1);\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ M\u00E9todo\ para\ eliminar\ pegante\ de\ una\ baldosa\r\n\ \ \ \ public\ void\ removeGlue(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col))\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ clearGlue(row,\ col);\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ true;\ //Accion\ exitosa\r\n\ \ \ \ \ \ \ \ }\ else\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ showMessage("La\ baldosa\ en\ esa\ posici\u00F3n\ no\ existe.",\ "Error");\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ false;\ //Error\ message\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row\ +\ 1,\ col))\ clearGlue(row\ +\ 1,\ col);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row\ -\ 1,\ col))\ clearGlue(row\ -\ 1,\ col);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col\ +\ 1))\ clearGlue(row,\ col\ +\ 1);\r\n\ \ \ \ \ \ \ \ if\ (isInBounds(row,\ col\ -\ 1))\ clearGlue(row,\ col\ -\ 1);\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ M\u00E9todo\ para\ verificar\ si\ una\ posici\u00F3n\ est\u00E1\ dentro\ del\ tablero\r\n\ \ \ \ private\ boolean\ isInBounds(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ return\ row\ >\=\ 0\ &&\ row\ <\ rows\ &&\ col\ >\=\ 0\ &&\ col\ <\ cols;\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ M\u00E9todo\ auxiliar\ para\ aplicar\ pegante\r\n\ \ \ \ private\ void\ applyGlue(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ Tile\ previousTile\ \=\ tiles.get(row).get(col);\r\n\ \ \ \ \ \ \ \ if\ (previousTile\ \!\=\ null\ &&\ \!previousTile.isGlueApplied())\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ previousTile.applyGlue();\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ true;\ //Accion\ exitosa\r\n\ \ \ \ \ \ \ \ }\ else\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ showMessage("La\ baldosa\ ya\ tiene\ pegamento.",\ "Error");\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ false;\ //Error\ message\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ //\ M\u00E9todo\ auxiliar\ para\ remover\ pegante\r\n\ \ \ \ private\ void\ clearGlue(int\ row,\ int\ col)\ {\r\n\ \ \ \ \ \ \ \ Tile\ previousTile\ \=\ tiles.get(row).get(col);\r\n\ \ \ \ \ \ \ \ if\ (previousTile\ \!\=\ null\ &&\ previousTile.isGlueApplied())\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ previousTile.removeGlue();\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ true;\ //Accion\ exitosa\r\n\ \ \ \ \ \ \ \ }\ else\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ showMessage("No\ hay\ pegamento\ para\ eliminar.",\ "Error");\r\n\ \ \ \ \ \ \ \ \ \ \ \ this.ok\ \=\ false;\ //Error\ message\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n
comment16.params=
comment16.target=boolean\ isGoal()
comment17.params=
comment17.target=void\ makeVisible()
comment18.params=
comment18.target=void\ makeInvisible()
comment19.params=
comment19.target=void\ finish()
comment2.params=starting\ ending
comment2.target=Puzzle(char[][],\ char[][])
comment20.params=
comment20.target=char[][]\ actualArrangement()
comment20.text=\r\n\ Devuelve\ una\ copia\ de\ la\ matriz\ actual\ de\ edici\u00F3n\ (starting),\r\n\ representando\ el\ estado\ actual\ del\ puzzle\ y\ pinta\ las\ baldosas.\r\n\ @return\ Una\ copia\ de\ la\ matriz\ starting.\r\n
comment21.params=
comment21.target=boolean\ ok()
comment22.params=args
comment22.target=void\ main(java.lang.String[])
comment3.params=row\ column\ label
comment3.target=void\ addTile(int,\ int,\ char)
comment4.params=row\ column
comment4.target=void\ deleteTile(int,\ int)
comment5.params=fromTile\ toTile\ from\ to
comment5.target=void\ relocateTileMovement(Tile,\ Tile,\ int[],\ int[])
comment6.params=from\ to
comment6.target=void\ relocateTile(int[],\ int[])
comment7.params=coords
comment7.target=boolean\ areValidCoordinates(int[])
comment8.params=tile
comment8.target=boolean\ isTileEmpty(Tile)
comment9.params=direction
comment9.target=void\ tilt(char)
numComments=23
